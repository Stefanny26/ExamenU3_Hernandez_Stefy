const jwt = require('jsonwebtoken');
const UserRepository = require('../repositories/user.repository');

const userRepository = new UserRepository();

const authMiddleware = async (req, res, next) => {
  try {
    const authHeader = req.header('Authorization');
    console.log('üîê Auth middleware - Header:', authHeader ? 'Presente' : 'Ausente');
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('‚ùå Auth middleware - Token inv√°lido o ausente');
      return res.status(401).json({
        success: false,
        message: 'Token de acceso requerido'
      });
    }

    const token = authHeader.replace('Bearer ', '');
    console.log('üîç Auth middleware - Token longitud:', token.length);
    
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    console.log('‚úÖ Auth middleware - Token decodificado, userId:', decoded.id);
    
    const user = await userRepository.findById(decoded.id);

    if (!user) {
      console.log('‚ùå Auth middleware - Usuario no encontrado:', decoded.id);
      return res.status(401).json({
        success: false,
        message: 'Token inv√°lido - usuario no encontrado'
      });
    }

    console.log('‚úÖ Auth middleware - Usuario autenticado:', user.name);
    req.user = user;
    next();
  } catch (error) {
    if (error.name === 'JsonWebTokenError') {
      console.error('‚ùå JWT Error:', error.message);
      return res.status(401).json({
        success: false,
        message: 'Token inv√°lido'
      });
    }
    
    if (error.name === 'TokenExpiredError') {
      console.error('‚ùå JWT Expired:', error.message);
      return res.status(401).json({
        success: false,
        message: 'Token expirado'
      });
    }

    console.error('‚ùå Error en middleware de autenticaci√≥n:', error);
    return res.status(500).json({
      success: false,
      message: 'Error interno del servidor'
    });
  }
};

module.exports = authMiddleware;
